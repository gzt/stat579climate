p<-ggplot(framed. aes(x=framed[,1], y=framed[,2]))
framed[,1]
framed[,2]
p<-ggplot(framed. mapping=aes(x=framed[,1], y=framed[,2]))
p<-ggplot(framed,aes(x=framed[,2], y=framed[,3]))
p<-p+geom_vline(yintercept=c(0,1))
p<-p+geom_segment(aes(x=(framed[,2]-.5*abs(cos(framed[,3]))), xend=(framed[,2]+.5*abs(cos(framed[,3]))), y=(framed[,2]-.5*abs(sin(framed[,3]))), yend=(framed[,2]+.5*abs(sin(framed[,3]))), fill=framed[,4]))
plotneedle<-p
fix(plotneedle)
d <- ggplot(diamonds, aes(x=carat, y=price))
d + geom_point()
d + geom_point(aes(colour = carat))
d + geom_point(aes(colour = carat)) + scale_colour_brewer()
fix(d)
library(ggplot2)
# http://had.co.nz/ggplot2
# qplot examples -------------------------------------------------------------
qplot(diamonds$cut, diamonds$carat)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, colour=clarity)
qplot(carat, price, data = diamonds, geom=c("point", "smooth"), method=lm)
qplot(carat, data = diamonds,
geom="histogram")
qplot(carat, data = diamonds,
geom="histogram", binwidth = 1)
qplot(carat, data = diamonds,
geom="histogram", binwidth = 0.1)
qplot(carat, data = diamonds,
geom="histogram", binwidth = 0.01)
# using ggplot() -------------------------------------------------------------
d <- ggplot(diamonds, aes(x=carat, y=price))
d + geom_point()
d + geom_point(aes(colour = carat))
d + geom_point(aes(colour = carat)) + scale_colour_brewer()
ggplot(diamonds) + geom_histogram(aes(x=price))
# Separation of statistcs and geometric elements -----------------------------
p <- ggplot(diamonds, aes(x=price))
p + geom_histogram()
p + stat_bin(geom="area")
p + stat_bin(geom="point")
p + stat_bin(geom="line")
p + geom_histogram(aes(fill = clarity))
p + geom_histogram(aes(y = ..density..))
# Setting vs mapping ---------------------------------------------------------
p <- ggplot(diamonds, aes(x=carat,y=price))
# What will this do?
p + geom_point(aes(colour = "green"))
p + geom_point(colour = "green")
p + geom_point(colour = colour)
p<-qplot(needles[,1], needles[,2], fill=z)
library(ggplot2)
p<-qplot(needles[,1], needles[,2], fill=z)
p<-qplot(needles[,1], needles[,2], fill=z, data=needles)
qplot(needles[,1], needles[,2], fill=z, data=needles)
jan<-read.csv("ensemble1_jan.csv")
last20<-read.csv("ensemble1_last20.csv")
setwd("~/Documents/GitHub/stat579climate")
jan<-read.csv("ensemble1_jan.csv")
last20<-read.csv("ensemble1_last20.csv")
qplot(fixedtime,anomaly,data=recent,color=anomaly) + geom_smooth()
library(ggplot2)
library(lubridate)
library(RColorBrewer)
qplot(fixedtime,anomaly,data=recent,color=anomaly) + geom_smooth()
library(maps)
View(monthly)
write.csv(monthly,"monthlyglobaldev.csv")
jan2012<-subset(jan,realyear==2012)
sep2012<-subset(last20,((realyear==2012)&(month==9)))
worldmap<-map_data("world")
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")
p
q<-ggplot()
q <- q + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
q<-q+geom_tile(data=sep2012, aes(x=long,y=lat,fill=value, alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")
q
setwd("~/Documents/My Dropbox/STAT 579")
library(XML)
install.packages("XML")
big<-NULL
for (i in 1985:2011){
url<-"http://www.baseball-reference.com/teams/SFG/YYYY.shtml"
url<-gsub("YYYY",i,url)
tables<-readHTMLTable(url)
batting<- tables$team_batting
batting$season<-i
names(batting)[3]<-"Player" #fix that so it has a name
batting<-subset(batting,Player!="")
batting$Rk <-as.numeric(as.character(batting$Rk))
#cheap workaround: the csv reader is good at this
write.csv(batting,file="batting.csv", row.names=F)
batting<-read.csv("batting.csv")
batting$Player<-as.character(batting$Player)
batting$last<-with(batting,substr(as.character(Player),nchar(as.character(Player)),nchar(as.character(Player))))
batting$handedness<-"R"
batting$handedness[which(batting$last=="#")]<-"B"
batting$handedness[which(batting$last=="*")]<-"L"
if(is.null(big)) big<-batting
else big<-cbind(big,batting)
}
library(XML)
big<-NULL
for (i in 1985:2011){
url<-"http://www.baseball-reference.com/teams/SFG/YYYY.shtml"
url<-gsub("YYYY",i,url)
tables<-readHTMLTable(url)
batting<- tables$team_batting
batting$season<-i
names(batting)[3]<-"Player" #fix that so it has a name
batting<-subset(batting,Player!="")
batting$Rk <-as.numeric(as.character(batting$Rk))
#cheap workaround: the csv reader is good at this
write.csv(batting,file="batting.csv", row.names=F)
batting<-read.csv("batting.csv")
batting$Player<-as.character(batting$Player)
batting$last<-with(batting,substr(as.character(Player),nchar(as.character(Player)),nchar(as.character(Player))))
batting$handedness<-"R"
batting$handedness[which(batting$last=="#")]<-"B"
batting$handedness[which(batting$last=="*")]<-"L"
if(is.null(big)) big<-batting
else big<-cbind(big,batting)
}
View(batting)
View(big)
library(XML)
big<-NULL
for (i in 1985:2011){
url<-"http://www.baseball-reference.com/teams/SFG/YYYY.shtml"
url<-gsub("YYYY",i,url)
tables<-readHTMLTable(url)
batting<- tables$team_batting
batting$season<-i
names(batting)[3]<-"Player" #fix that so it has a name
batting<-subset(batting,Player!="")
batting$Rk <-as.numeric(as.character(batting$Rk))
#cheap workaround: the csv reader is good at this
write.csv(batting,file="batting.csv", row.names=F)
batting<-read.csv("batting.csv")
batting$Player<-as.character(batting$Player)
batting$last<-with(batting,substr(as.character(Player),nchar(as.character(Player)),nchar(as.character(Player))))
batting$handedness<-"R"
batting$handedness[which(batting$last=="#")]<-"B"
batting$handedness[which(batting$last=="*")]<-"L"
if(is.null(big)) big<-batting
else big<-rbind(big,batting)
}
big<-NULL
big<-NULL
for (i in 1985:2011){
url<-"http://www.baseball-reference.com/teams/CHC/YYYY.shtml"
url<-gsub("YYYY",i,url)
tables<-readHTMLTable(url)
batting<- tables$team_batting
batting$season<-i
names(batting)[3]<-"Player" #fix that so it has a name
batting<-subset(batting,Player!="")
batting$Rk <-as.numeric(as.character(batting$Rk))
#cheap workaround: the csv reader is good at this
write.csv(batting,file="batting.csv", row.names=F)
batting<-read.csv("batting.csv")
batting$Player<-as.character(batting$Player)
batting$last<-with(batting,substr(as.character(Player),nchar(as.character(Player)),nchar(as.character(Player))))
batting$handedness<-"R"
batting$handedness[which(batting$last=="#")]<-"B"
batting$handedness[which(batting$last=="*")]<-"L"
if(is.null(big)) big<-batting
else big<-rbind(big,batting)
}
View(big)
View(big)
big$Player<-gsub("*","",big$Player)
big$Player<-gsub("#","",big$Player)
View(big)
big$Player<-gsub("*","",big$Player)
View(big)
View(big)
big$Player<-gsub('*',"",big$Player)
View(big)
big$Player<-gsub('*',"",big$Player)
big$Player<-gsub('\*',"",big$Player)
big$Player<-gsub('/*',"",big$Player)
View(big)
big$Player<-gsub("'*","",big$Player)
View(big)
big$Player<-gsub("[*]","",big$Player)
View(big)
qplot(year,OPS,data=big, geom="line")
library(ggplot2)
qplot(year,OPS,data=big, geom="line")
View(big)
qplot(season,OPS,data=big, geom="line")
qplot(season,OPS,data=big, color=Player, geom="line")
write.csv(big,"chicagocubs-geoffrey-thompson.csv")
url<-"http://ratings.fide.com/toparc.phtml?cod=1"
url<-"http://ratings.fide.com/toparc.phtml?cod=1"
tables<-readHTMLTable(url)
fix(tables)
ldply(tables,dim)
library(plyr)
ldply(tables,dim)
fix(tables)
rating<-tables[[2]]
View(rating)
rating<-tables[[4]]
View(rating)
tables<-readHTMLTable(url)
url<-"http://ratings.fide.com/toparc.phtml?cod=5"
tables<-readHTMLTable(url)
fix(tables)
ldply(tables,dim)
rating<-tables[[4]]
View(rating)
tables<-readHTMLTable(url)
ldply(tables,dim)
rating<-tables[[5]]
View(rating)
ratingtemp<-tables[[5]] #this takes the first row, which is variable names, as the first variable
varnames<-ratingtemp[1,]
rating<-rating[2:dim(ratingtemp,2),]
rating<-rating[2:dim(ratingtemp)[2],]
View(rating)
rating<-rating[2:dim(ratingtemp)[1],]
rating<-ratingtemp[2:dim(ratingtemp)[1],]
names(rating)<-varnames
View(varnames)
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day")
names(rating)<-tablenames
i=0
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
time<-4*i+1
url<-gsub("YYYY",time,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
timing<-4*i+1
ratingtemp$time<-timing
tables[[1]]
fix(tables)
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day","time")
for (i=0:58){
i=0
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
timing<-4*i+1
url<-gsub("YYYY",timing,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
ratingtemp$time<-timing
if(is.null(rating)) rating<-ratingtemp
else big<-rbind(rating,ratingtemp)
}
write.csv(rating,"geoffrey-thompson-ratingsfidecom.csv")
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day","time")
for (i=0:58){
i=0
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
timing<-4*i+1
url<-gsub("YYYY",timing,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
ratingtemp$time<-timing
if(is.null(rating)) rating<-ratingtemp
else rating<-rbind(rating,ratingtemp)
}
write.csv(rating,"geoffrey-thompson-ratingsfidecom.csv")
library(XML)
library(plyr)
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day","time")
for (i=0:58){
i=0
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
timing<-4*i+1
url<-gsub("YYYY",timing,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
ratingtemp$time<-timing
if(is.null(rating)) rating<-ratingtemp
else rating<-rbind(rating,ratingtemp)
}
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day","time")
for (i in 0:58){
i=0
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
timing<-4*i+1
url<-gsub("YYYY",timing,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
ratingtemp$time<-timing
if(is.null(rating)) rating<-ratingtemp
else rating<-rbind(rating,ratingtemp)
}
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day","time")
for (i in 0:58){
i=0
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
timing<-4*i+1
url<-gsub("YYYY",timing,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
ratingtemp$time<-timing
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
if(is.null(rating)) rating<-ratingtemp
else rating<-rbind(rating,ratingtemp)
}
rating<-NULL
tablenames<-c("rank","name","title","country","rating","games","b-day","time")
for (i in 0:58){
url<-"http://ratings.fide.com/toparc.phtml?cod=YYYY"
timing<-4*i+1
url<-gsub("YYYY",timing,url)
tables<-readHTMLTable(url)
ratingtemp<-tables[[5]] #this unfortunately takes the first row, which is variable names, as the first variable
ratingtemp$time<-timing
names(ratingtemp)<-tablenames
ratingtemp<-ratingtemp[2:dim(ratingtemp)[1],] #removes that first row
if(is.null(rating)) rating<-ratingtemp
else rating<-rbind(rating,ratingtemp)
}
write.csv(rating,"geoffrey-thompson-ratingsfidecom.csv")
big<-NULL
for (i in 1985:2011){
url<-"http://www.baseball-reference.com/teams/CHC/YYYY.shtml"
url<-gsub("YYYY",i,url)
tables<-readHTMLTable(url)
batting<- tables$team_batting
batting$season<-i
names(batting)[3]<-"Player" #fix that so it has a name
batting<-subset(batting,Player!="")
batting$Rk <-as.numeric(as.character(batting$Rk))
#cheap workaround: the csv reader is good at this
write.csv(batting,file="batting.csv", row.names=F)
batting<-read.csv("batting.csv")
batting$Player<-as.character(batting$Player)
batting$last<-with(batting,substr(as.character(Player),nchar(as.character(Player)),nchar(as.character(Player))))
batting$handedness<-"R"
batting$handedness[which(batting$last=="#")]<-"B"
batting$handedness[which(batting$last=="*")]<-"L"
if(is.null(big)) big<-batting
else big<-rbind(big,batting)
}
big$Player<-gsub("[*]","",big$Player)
big$Player<-gsub("#","",big$Player)
library(ggplot2)
qplot(season,OPS,data=big, color=Player, geom="line")
#this is illegible, but it's what was asked for, I guess.
write.csv(big,"geoffrey-thompson-CHC.csv")
View(rating)
summary(rating)
subset(rating,title=f)
subset(rating,title="f")
fidemaster<-subset(rating,title="f")
fidemaster<-subset(rating,title=="f")
View(fidemaster)
qplot(rating,time,data=rating,color=name)
library(ggplot2)
qplot(rating,time,data=rating,color=name)
top20<-subset(rating,rank<20)
qplot(rating,time,data=top20,color=name,geom="line")
top20<-subset(rating,rank<20)
top20<-subset(rating,as.numeric(rank)<20)
qplot(rating,time,data=top20,color=name,geom="line")
+coord_flip()
qplot(time,rating,data=top20,color=name,geom="line")
qplot(time,as.numeric(rating),data=top20,color=name,geom="line")
View(top20)
top20$rating<-as.numeric(top20$rating)
View(top20)
top20<-subset(rating,as.numeric(as.character((rank))<20)
)
top20<-subset(rating,as.numeric(as.character((rank)))<20)
top20$rating<-as.numeric(as.character(rating))
top20$rating<-as.numeric(as.character(top20$rating))
View(top20)
qplot(time,rating,data=top20,color=name,geom="line")
jan<-read.csv("ensemble1_jan.csv")
last20<-read.csv("ensemble1_last20.csv")
monthly<-read.csv("monthlyglobaldev.csv")
library(lubridate)
library(RColorBrewer)
library(ggplot2)
library(maps)
jan2012<-subset(jan,realyear==2012)
sep2012<-subset(last20,((realyear==2012)&(month==9)))
worldmap<-map_data("world")
library(maps)
install.packages(scales)
install.packages(scale)
library(scale)
install.packages('scale')
worldmap<-map_data("world")
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar", limit=c(-3,3))
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar", )
p
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")
p
q<-ggplot()
q <- q + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
q<-q+geom_tile(data=sep2012, aes(x=long,y=lat,fill=value, alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
q
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(maps)
library(scale)
q<-ggplot()
q <- q + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
q<-q+geom_tile(data=sep2012, aes(x=long,y=lat,fill=value, alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
q
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group, xlim=c(-180,180), ylim=c(-90,90)),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" , xlim=c(-180,180), ylim=c(-90,90))+ theme(aspect.ratio=1/2)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
View(jan2012)
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+ylim(-90,90)+xlim(-180,180)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+ylim(-90,90)+xlim(-185,185)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+ylim(-90,90)+xlim(-185,190)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
summary(worldmap)
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+ylim(-90,90)+xlim(-185,191)
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
q<-ggplot()
q <- q + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)
q<-q+geom_tile(data=sep2012, aes(x=long,y=lat,fill=value, alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()+ylim(-90,90)+xlim(-180,191)
q
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)++coord_cartesian(ylim=c(-90,90), xlim=c(-180,180))
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+coord_cartesian(ylim=c(-90,90), xlim=c(-180,180))
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+coord_cartesian(ylim=c(-90,90), xlim=c(-180,180))+scale_y_continuous(breaks=seq(-90, 90, 10))+scale_x_continuous(breaks=seq(-180, 180, 10))
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
p<-ggplot()
p <- p + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+coord_cartesian(ylim=c(-90,90), xlim=c(-180,180))+scale_y_continuous(breaks=seq(-90, 90, 15))+scale_x_continuous(breaks=seq(-180, 180, 15))
p<-p+geom_tile(data=jan2012, aes(x=long,y=lat,fill=value,alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
p
q<-ggplot()
q <- q + geom_polygon( data=worldmap, aes(x=long, y=lat, group = group),colour="black", fill="white" )+ theme(aspect.ratio=1/2)+coord_cartesian(ylim=c(-90,90), xlim=c(-180,180))+scale_y_continuous(breaks=seq(-90, 90, 15))+scale_x_continuous(breaks=seq(-180, 180, 15))
q<-q+geom_tile(data=sep2012, aes(x=long,y=lat,fill=value, alpha=.25))+  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")+theme_bw()
q
qplot(fixedtime,anomaly,data=recent,color=anomaly) + geom_smooth()
recent<-subset(monthly, fixedtime>1990)
monthly<-read.csv("monthlyglobaldev.csv")
View(monthly)
summary(monthly)
recent<-subset(monthly, fixedtime>1990)
monthly$fixedtime<-ymd(monthly$fixedtime)
qplot(fixedtime,anomaly,data=monthly,color=anomaly) + geom_smooth()
qplot(fixedtime,anomaly,data=monthly,color=anomaly) + geom_smooth()scale_fill_gradient2(low = "blue", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")
qplot(fixedtime,anomaly,data=monthly,color=anomaly) + geom_smooth()+scale_fill_gradient2(low = "blue", high = "red", midpoint = 0,space = "rgb", na.value = "grey50",guide = "colourbar")
qplot(fixedtime,anomaly,data=monthly,color=anomaly) + geom_smooth()
recent<-subset(monthly, year(fixedtime)>1975)
qplot(fixedtime,anomaly,data=recent) + geom_smooth()
qplot(fixedtime,anomaly,data=recent) + geom_smooth(anomaly~fixedtime)
qplot(fixedtime,anomaly,data=recent) + geom_smooth(method="lm")
qplot(fixedtime,anomaly,data=recent) + geom_smooth(method="lm", se=FALSE)
recent<-subset(monthly, year(fixedtime)>1975)
qplot(fixedtime,anomaly,data=recent) + geom_smooth(method="lm", se=FALSE)
recent<-subset(monthly, year(fixedtime)>1965)
qplot(fixedtime,anomaly,data=recent) + geom_smooth(method="lm", se=FALSE)
recent<-subset(monthly, year(fixedtime)>1960)
qplot(fixedtime,anomaly,data=recent) + geom_smooth(method="lm", se=FALSE)
recent<-subset(monthly, year(fixedtime)>1975)
qplot(fixedtime,anomaly,data=recent) + geom_smooth(method="lm", se=FALSE)
qplot(fixedtime,anomaly,data=monthly,geom=line) + geom_smooth()
qplot(fixedtime,anomaly,data=monthly,geom="line") + geom_smooth()
qplot(fixedtime,anomaly,data=monthly,geom="line") + geom_smooth(se=FALSE)
qplot(fixedtime,anomaly,data=monthly,geom="line",color=anomaly) + geom_smooth(se=FALSE)
qplot(fixedtime,anomaly,data=monthly,geom="line",color=anomaly) + geom_smooth(se=FALSE,color="red")
